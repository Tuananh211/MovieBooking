// Generated by Dagger (https://google.github.io/dagger).
package com.base.moviebooking.di.module;

import com.base.moviebooking.network.ApiInterface;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

public final class NetworkModule_ProvideApiInterfaceFactory implements Factory<ApiInterface> {
  private final NetworkModule module;

  private final Provider<OkHttpClient> clientProvider;

  public NetworkModule_ProvideApiInterfaceFactory(
      NetworkModule module, Provider<OkHttpClient> clientProvider) {
    this.module = module;
    this.clientProvider = clientProvider;
  }

  @Override
  public ApiInterface get() {
    return proxyProvideApiInterface(module, clientProvider.get());
  }

  public static NetworkModule_ProvideApiInterfaceFactory create(
      NetworkModule module, Provider<OkHttpClient> clientProvider) {
    return new NetworkModule_ProvideApiInterfaceFactory(module, clientProvider);
  }

  public static ApiInterface proxyProvideApiInterface(NetworkModule instance, OkHttpClient client) {
    return Preconditions.checkNotNull(
        instance.provideApiInterface(client),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
