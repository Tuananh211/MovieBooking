// Generated by Dagger (https://google.github.io/dagger).
package com.base.moviebooking.di;

import android.app.Activity;
import android.app.Application;
import android.content.Context;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModel;
import com.base.moviebooking.BaseApplication;
import com.base.moviebooking.BaseApplication_MembersInjector;
import com.base.moviebooking.base.BaseFragment_MembersInjector;
import com.base.moviebooking.di.module.ActivityBindingModule_BindMainActivity;
import com.base.moviebooking.di.module.FragmentBindingModule_BindAccountFragment;
import com.base.moviebooking.di.module.FragmentBindingModule_BindChangePassFragment;
import com.base.moviebooking.di.module.FragmentBindingModule_BindChonGheFragment;
import com.base.moviebooking.di.module.FragmentBindingModule_BindDetailMovieFragment;
import com.base.moviebooking.di.module.FragmentBindingModule_BindFilmInfoChildFragment;
import com.base.moviebooking.di.module.FragmentBindingModule_BindFilmInfoFragment;
import com.base.moviebooking.di.module.FragmentBindingModule_BindGiaoDichFragment;
import com.base.moviebooking.di.module.FragmentBindingModule_BindHomeFragment;
import com.base.moviebooking.di.module.FragmentBindingModule_BindMovieByCategoryIdFragment;
import com.base.moviebooking.di.module.FragmentBindingModule_BindScheduleChildFragment1;
import com.base.moviebooking.di.module.FragmentBindingModule_BindScheduleChildFragment2;
import com.base.moviebooking.di.module.FragmentBindingModule_BindScheduleChildFragment3;
import com.base.moviebooking.di.module.FragmentBindingModule_BindScheduleChildFragment4;
import com.base.moviebooking.di.module.FragmentBindingModule_BindScheduleChildFragment5;
import com.base.moviebooking.di.module.FragmentBindingModule_BindScheduleChildFragment6;
import com.base.moviebooking.di.module.FragmentBindingModule_BindScheduleChildFragment7;
import com.base.moviebooking.di.module.FragmentBindingModule_BindScheduleFragment;
import com.base.moviebooking.di.module.FragmentBindingModule_BindSearchFragment;
import com.base.moviebooking.di.module.FragmentBindingModule_BindShowTimeChildFragment;
import com.base.moviebooking.di.module.FragmentBindingModule_BindShowTimeFragment;
import com.base.moviebooking.di.module.FragmentBindingModule_BindSignInFragment;
import com.base.moviebooking.di.module.FragmentBindingModule_BindSignUpFragment;
import com.base.moviebooking.di.module.FragmentBindingModule_BindSplashFragment;
import com.base.moviebooking.di.module.FragmentBindingModule_BindThanhToanFragment;
import com.base.moviebooking.di.module.FragmentBindingModule_BindTheaterFragment;
import com.base.moviebooking.di.module.FragmentBindingModule_BindThongTinThanhToanFragment;
import com.base.moviebooking.di.module.FragmentBindingModule_BindUserInfoFragment;
import com.base.moviebooking.di.module.NetworkModule;
import com.base.moviebooking.di.module.NetworkModule_ProvideApiInterfaceFactory;
import com.base.moviebooking.di.module.NetworkModule_ProvideHttpClientFactory;
import com.base.moviebooking.network.ApiInterface;
import com.base.moviebooking.network.repository.Repository;
import com.base.moviebooking.network.repository.Repository_Factory;
import com.base.moviebooking.ui.account.AccountFragment;
import com.base.moviebooking.ui.account.AccountViewModel;
import com.base.moviebooking.ui.account.AccountViewModel_Factory;
import com.base.moviebooking.ui.change_pass.ChangePassFragment;
import com.base.moviebooking.ui.change_pass.ChangePassViewModel;
import com.base.moviebooking.ui.change_pass.ChangePassViewModel_Factory;
import com.base.moviebooking.ui.chonghe.ChonGheFragment;
import com.base.moviebooking.ui.chonghe.ChonGheViewModel;
import com.base.moviebooking.ui.chonghe.ChonGheViewModel_Factory;
import com.base.moviebooking.ui.detail_movie.DetailMovieFragment;
import com.base.moviebooking.ui.detail_movie.DetailMovieViewModel;
import com.base.moviebooking.ui.detail_movie.DetailMovieViewModel_Factory;
import com.base.moviebooking.ui.film_info.FilmInfoChildFragment;
import com.base.moviebooking.ui.film_info.FilmInfoFragment;
import com.base.moviebooking.ui.film_info.FilmInfoViewModel;
import com.base.moviebooking.ui.film_info.FilmInfoViewModel_Factory;
import com.base.moviebooking.ui.giaodich.GiaoDichFragment;
import com.base.moviebooking.ui.giaodich.GiaoDichViewModel;
import com.base.moviebooking.ui.giaodich.GiaoDichViewModel_Factory;
import com.base.moviebooking.ui.home.HomeFragment;
import com.base.moviebooking.ui.home.HomeViewModel;
import com.base.moviebooking.ui.home.HomeViewModel_Factory;
import com.base.moviebooking.ui.main.MainActivity;
import com.base.moviebooking.ui.main.MainViewModel;
import com.base.moviebooking.ui.main.MainViewModel_Factory;
import com.base.moviebooking.ui.movie_by_categoryId.MovieByCategoryIdFragment;
import com.base.moviebooking.ui.movie_by_categoryId.MovieByCategoryIdModel;
import com.base.moviebooking.ui.movie_by_categoryId.MovieByCategoryIdModel_Factory;
import com.base.moviebooking.ui.schedule.ScheduleCinemaFragment;
import com.base.moviebooking.ui.schedule.ScheduleCinemaModel;
import com.base.moviebooking.ui.schedule.ScheduleCinemaModel_Factory;
import com.base.moviebooking.ui.schedule_child.schedule_child1.ScheduleChildFragment1;
import com.base.moviebooking.ui.schedule_child.schedule_child1.ScheduleChildModel1;
import com.base.moviebooking.ui.schedule_child.schedule_child1.ScheduleChildModel1_Factory;
import com.base.moviebooking.ui.schedule_child.schedule_child2.ScheduleChildFragment2;
import com.base.moviebooking.ui.schedule_child.schedule_child2.ScheduleChildModel2;
import com.base.moviebooking.ui.schedule_child.schedule_child2.ScheduleChildModel2_Factory;
import com.base.moviebooking.ui.schedule_child.schedule_child3.ScheduleChildFragment3;
import com.base.moviebooking.ui.schedule_child.schedule_child3.ScheduleChildModel3;
import com.base.moviebooking.ui.schedule_child.schedule_child3.ScheduleChildModel3_Factory;
import com.base.moviebooking.ui.schedule_child.schedule_child4.ScheduleChildFragment4;
import com.base.moviebooking.ui.schedule_child.schedule_child4.ScheduleChildModel4;
import com.base.moviebooking.ui.schedule_child.schedule_child4.ScheduleChildModel4_Factory;
import com.base.moviebooking.ui.schedule_child.schedule_child5.ScheduleChildFragment5;
import com.base.moviebooking.ui.schedule_child.schedule_child5.ScheduleChildModel5;
import com.base.moviebooking.ui.schedule_child.schedule_child5.ScheduleChildModel5_Factory;
import com.base.moviebooking.ui.schedule_child.schedule_child6.ScheduleChildFragment6;
import com.base.moviebooking.ui.schedule_child.schedule_child6.ScheduleChildModel6;
import com.base.moviebooking.ui.schedule_child.schedule_child6.ScheduleChildModel6_Factory;
import com.base.moviebooking.ui.schedule_child.schedule_child7.ScheduleChildFragment7;
import com.base.moviebooking.ui.schedule_child.schedule_child7.ScheduleChildModel7;
import com.base.moviebooking.ui.schedule_child.schedule_child7.ScheduleChildModel7_Factory;
import com.base.moviebooking.ui.search_film.SearchFilmFragment;
import com.base.moviebooking.ui.search_film.SearchFilmModel;
import com.base.moviebooking.ui.search_film.SearchFilmModel_Factory;
import com.base.moviebooking.ui.show_time.ShowTimeFragment;
import com.base.moviebooking.ui.show_time.ShowTimeViewModel;
import com.base.moviebooking.ui.show_time.ShowTimeViewModel_Factory;
import com.base.moviebooking.ui.show_time_child.ShowTimeChildFragment;
import com.base.moviebooking.ui.show_time_child.ShowTimeChildViewModel;
import com.base.moviebooking.ui.show_time_child.ShowTimeChildViewModel_Factory;
import com.base.moviebooking.ui.sign_in.SignInFragment;
import com.base.moviebooking.ui.sign_in.SignInViewModel;
import com.base.moviebooking.ui.sign_in.SignInViewModel_Factory;
import com.base.moviebooking.ui.sign_up.SignUpFragment;
import com.base.moviebooking.ui.sign_up.SignUpViewModel;
import com.base.moviebooking.ui.sign_up.SignUpViewModel_Factory;
import com.base.moviebooking.ui.splash.SplashFragment;
import com.base.moviebooking.ui.splash.SplashViewModel;
import com.base.moviebooking.ui.splash.SplashViewModel_Factory;
import com.base.moviebooking.ui.thanhtoan.ThanhToanFragment;
import com.base.moviebooking.ui.thanhtoan.ThanhToanViewModel;
import com.base.moviebooking.ui.thanhtoan.ThanhToanViewModel_Factory;
import com.base.moviebooking.ui.theater.TheaterFragment;
import com.base.moviebooking.ui.theater.TheaterViewModel;
import com.base.moviebooking.ui.theater.TheaterViewModel_Factory;
import com.base.moviebooking.ui.thongtin_Thanhtoan.ThongTinThanhToanFragment;
import com.base.moviebooking.ui.thongtin_Thanhtoan.ThongTinThanhToanViewModel;
import com.base.moviebooking.ui.thongtin_Thanhtoan.ThongTinThanhToanViewModel_Factory;
import com.base.moviebooking.ui.user_info.UserInfoFragment;
import com.base.moviebooking.ui.user_info.UserInfoViewModel;
import com.base.moviebooking.ui.user_info.UserInfoViewModel_Factory;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivityBindingModule_BindMainActivity.MainActivitySubcomponent.Builder>
      mainActivitySubcomponentBuilderProvider;

  private Provider<FragmentBindingModule_BindSplashFragment.SplashFragmentSubcomponent.Builder>
      splashFragmentSubcomponentBuilderProvider;

  private Provider<FragmentBindingModule_BindHomeFragment.HomeFragmentSubcomponent.Builder>
      homeFragmentSubcomponentBuilderProvider;

  private Provider<FragmentBindingModule_BindAccountFragment.AccountFragmentSubcomponent.Builder>
      accountFragmentSubcomponentBuilderProvider;

  private Provider<FragmentBindingModule_BindTheaterFragment.TheaterFragmentSubcomponent.Builder>
      theaterFragmentSubcomponentBuilderProvider;

  private Provider<FragmentBindingModule_BindFilmInfoFragment.FilmInfoFragmentSubcomponent.Builder>
      filmInfoFragmentSubcomponentBuilderProvider;

  private Provider<
          FragmentBindingModule_BindFilmInfoChildFragment.FilmInfoChildFragmentSubcomponent.Builder>
      filmInfoChildFragmentSubcomponentBuilderProvider;

  private Provider<FragmentBindingModule_BindSignUpFragment.SignUpFragmentSubcomponent.Builder>
      signUpFragmentSubcomponentBuilderProvider;

  private Provider<FragmentBindingModule_BindSignInFragment.SignInFragmentSubcomponent.Builder>
      signInFragmentSubcomponentBuilderProvider;

  private Provider<FragmentBindingModule_BindChonGheFragment.ChonGheFragmentSubcomponent.Builder>
      chonGheFragmentSubcomponentBuilderProvider;

  private Provider<FragmentBindingModule_BindShowTimeFragment.ShowTimeFragmentSubcomponent.Builder>
      showTimeFragmentSubcomponentBuilderProvider;

  private Provider<
          FragmentBindingModule_BindShowTimeChildFragment.ShowTimeChildFragmentSubcomponent.Builder>
      showTimeChildFragmentSubcomponentBuilderProvider;

  private Provider<
          FragmentBindingModule_BindDetailMovieFragment.DetailMovieFragmentSubcomponent.Builder>
      detailMovieFragmentSubcomponentBuilderProvider;

  private Provider<
          FragmentBindingModule_BindThanhToanFragment.ThanhToanFragmentSubcomponent.Builder>
      thanhToanFragmentSubcomponentBuilderProvider;

  private Provider<
          FragmentBindingModule_BindChangePassFragment.ChangePassFragmentSubcomponent.Builder>
      changePassFragmentSubcomponentBuilderProvider;

  private Provider<
          FragmentBindingModule_BindThongTinThanhToanFragment.ThongTinThanhToanFragmentSubcomponent
              .Builder>
      thongTinThanhToanFragmentSubcomponentBuilderProvider;

  private Provider<FragmentBindingModule_BindGiaoDichFragment.GiaoDichFragmentSubcomponent.Builder>
      giaoDichFragmentSubcomponentBuilderProvider;

  private Provider<FragmentBindingModule_BindUserInfoFragment.UserInfoFragmentSubcomponent.Builder>
      userInfoFragmentSubcomponentBuilderProvider;

  private Provider<
          FragmentBindingModule_BindMovieByCategoryIdFragment.MovieByCategoryIdFragmentSubcomponent
              .Builder>
      movieByCategoryIdFragmentSubcomponentBuilderProvider;

  private Provider<FragmentBindingModule_BindSearchFragment.SearchFilmFragmentSubcomponent.Builder>
      searchFilmFragmentSubcomponentBuilderProvider;

  private Provider<
          FragmentBindingModule_BindScheduleFragment.ScheduleCinemaFragmentSubcomponent.Builder>
      scheduleCinemaFragmentSubcomponentBuilderProvider;

  private Provider<
          FragmentBindingModule_BindScheduleChildFragment1.ScheduleChildFragment1Subcomponent
              .Builder>
      scheduleChildFragment1SubcomponentBuilderProvider;

  private Provider<
          FragmentBindingModule_BindScheduleChildFragment2.ScheduleChildFragment2Subcomponent
              .Builder>
      scheduleChildFragment2SubcomponentBuilderProvider;

  private Provider<
          FragmentBindingModule_BindScheduleChildFragment3.ScheduleChildFragment3Subcomponent
              .Builder>
      scheduleChildFragment3SubcomponentBuilderProvider;

  private Provider<
          FragmentBindingModule_BindScheduleChildFragment4.ScheduleChildFragment4Subcomponent
              .Builder>
      scheduleChildFragment4SubcomponentBuilderProvider;

  private Provider<
          FragmentBindingModule_BindScheduleChildFragment5.ScheduleChildFragment5Subcomponent
              .Builder>
      scheduleChildFragment5SubcomponentBuilderProvider;

  private Provider<
          FragmentBindingModule_BindScheduleChildFragment6.ScheduleChildFragment6Subcomponent
              .Builder>
      scheduleChildFragment6SubcomponentBuilderProvider;

  private Provider<
          FragmentBindingModule_BindScheduleChildFragment7.ScheduleChildFragment7Subcomponent
              .Builder>
      scheduleChildFragment7SubcomponentBuilderProvider;

  private Provider<Application> applicationProvider;

  private Provider<Context> provideContextProvider;

  private Provider<OkHttpClient> provideHttpClientProvider;

  private Provider<ApiInterface> provideApiInterfaceProvider;

  private Provider<Repository> repositoryProvider;

  private Provider<MovieByCategoryIdModel> movieByCategoryIdModelProvider;

  private Provider<SearchFilmModel> searchFilmModelProvider;

  private Provider<HomeViewModel> homeViewModelProvider;

  private Provider<AccountViewModel> accountViewModelProvider;

  private Provider<TheaterViewModel> theaterViewModelProvider;

  private Provider<SignUpViewModel> signUpViewModelProvider;

  private Provider<SignInViewModel> signInViewModelProvider;

  private Provider<ChonGheViewModel> chonGheViewModelProvider;

  private Provider<ShowTimeChildViewModel> showTimeChildViewModelProvider;

  private Provider<ThanhToanViewModel> thanhToanViewModelProvider;

  private Provider<ThongTinThanhToanViewModel> thongTinThanhToanViewModelProvider;

  private Provider<GiaoDichViewModel> giaoDichViewModelProvider;

  private Provider<UserInfoViewModel> userInfoViewModelProvider;

  private Provider<DetailMovieViewModel> detailMovieViewModelProvider;

  private Provider<ChangePassViewModel> changePassViewModelProvider;

  private Provider<ScheduleCinemaModel> scheduleCinemaModelProvider;

  private Provider<ScheduleChildModel1> scheduleChildModel1Provider;

  private Provider<ScheduleChildModel2> scheduleChildModel2Provider;

  private Provider<ScheduleChildModel3> scheduleChildModel3Provider;

  private Provider<ScheduleChildModel4> scheduleChildModel4Provider;

  private Provider<ScheduleChildModel5> scheduleChildModel5Provider;

  private Provider<ScheduleChildModel6> scheduleChildModel6Provider;

  private Provider<ScheduleChildModel7> scheduleChildModel7Provider;

  private DaggerAppComponent(NetworkModule networkModuleParam, Application applicationParam) {

    initialize(networkModuleParam, applicationParam);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(28)
        .put(MainActivity.class, (Provider) mainActivitySubcomponentBuilderProvider)
        .put(SplashFragment.class, (Provider) splashFragmentSubcomponentBuilderProvider)
        .put(HomeFragment.class, (Provider) homeFragmentSubcomponentBuilderProvider)
        .put(AccountFragment.class, (Provider) accountFragmentSubcomponentBuilderProvider)
        .put(TheaterFragment.class, (Provider) theaterFragmentSubcomponentBuilderProvider)
        .put(FilmInfoFragment.class, (Provider) filmInfoFragmentSubcomponentBuilderProvider)
        .put(
            FilmInfoChildFragment.class,
            (Provider) filmInfoChildFragmentSubcomponentBuilderProvider)
        .put(SignUpFragment.class, (Provider) signUpFragmentSubcomponentBuilderProvider)
        .put(SignInFragment.class, (Provider) signInFragmentSubcomponentBuilderProvider)
        .put(ChonGheFragment.class, (Provider) chonGheFragmentSubcomponentBuilderProvider)
        .put(ShowTimeFragment.class, (Provider) showTimeFragmentSubcomponentBuilderProvider)
        .put(
            ShowTimeChildFragment.class,
            (Provider) showTimeChildFragmentSubcomponentBuilderProvider)
        .put(DetailMovieFragment.class, (Provider) detailMovieFragmentSubcomponentBuilderProvider)
        .put(ThanhToanFragment.class, (Provider) thanhToanFragmentSubcomponentBuilderProvider)
        .put(ChangePassFragment.class, (Provider) changePassFragmentSubcomponentBuilderProvider)
        .put(
            ThongTinThanhToanFragment.class,
            (Provider) thongTinThanhToanFragmentSubcomponentBuilderProvider)
        .put(GiaoDichFragment.class, (Provider) giaoDichFragmentSubcomponentBuilderProvider)
        .put(UserInfoFragment.class, (Provider) userInfoFragmentSubcomponentBuilderProvider)
        .put(
            MovieByCategoryIdFragment.class,
            (Provider) movieByCategoryIdFragmentSubcomponentBuilderProvider)
        .put(SearchFilmFragment.class, (Provider) searchFilmFragmentSubcomponentBuilderProvider)
        .put(
            ScheduleCinemaFragment.class,
            (Provider) scheduleCinemaFragmentSubcomponentBuilderProvider)
        .put(
            ScheduleChildFragment1.class,
            (Provider) scheduleChildFragment1SubcomponentBuilderProvider)
        .put(
            ScheduleChildFragment2.class,
            (Provider) scheduleChildFragment2SubcomponentBuilderProvider)
        .put(
            ScheduleChildFragment3.class,
            (Provider) scheduleChildFragment3SubcomponentBuilderProvider)
        .put(
            ScheduleChildFragment4.class,
            (Provider) scheduleChildFragment4SubcomponentBuilderProvider)
        .put(
            ScheduleChildFragment5.class,
            (Provider) scheduleChildFragment5SubcomponentBuilderProvider)
        .put(
            ScheduleChildFragment6.class,
            (Provider) scheduleChildFragment6SubcomponentBuilderProvider)
        .put(
            ScheduleChildFragment7.class,
            (Provider) scheduleChildFragment7SubcomponentBuilderProvider)
        .build();
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  private Map<Class<? extends ViewModel>, Provider<ViewModel>>
      getMapOfClassOfAndProviderOfViewModel() {
    return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(27)
        .put(SplashViewModel.class, (Provider) SplashViewModel_Factory.create())
        .put(MovieByCategoryIdModel.class, (Provider) movieByCategoryIdModelProvider)
        .put(SearchFilmModel.class, (Provider) searchFilmModelProvider)
        .put(HomeViewModel.class, (Provider) homeViewModelProvider)
        .put(AccountViewModel.class, (Provider) accountViewModelProvider)
        .put(FilmInfoViewModel.class, (Provider) FilmInfoViewModel_Factory.create())
        .put(TheaterViewModel.class, (Provider) theaterViewModelProvider)
        .put(SignUpViewModel.class, (Provider) signUpViewModelProvider)
        .put(SignInViewModel.class, (Provider) signInViewModelProvider)
        .put(ChonGheViewModel.class, (Provider) chonGheViewModelProvider)
        .put(ShowTimeViewModel.class, (Provider) ShowTimeViewModel_Factory.create())
        .put(ShowTimeChildViewModel.class, (Provider) showTimeChildViewModelProvider)
        .put(ThanhToanViewModel.class, (Provider) thanhToanViewModelProvider)
        .put(ThongTinThanhToanViewModel.class, (Provider) thongTinThanhToanViewModelProvider)
        .put(GiaoDichViewModel.class, (Provider) giaoDichViewModelProvider)
        .put(UserInfoViewModel.class, (Provider) userInfoViewModelProvider)
        .put(DetailMovieViewModel.class, (Provider) detailMovieViewModelProvider)
        .put(ChangePassViewModel.class, (Provider) changePassViewModelProvider)
        .put(ScheduleCinemaModel.class, (Provider) scheduleCinemaModelProvider)
        .put(ScheduleChildModel1.class, (Provider) scheduleChildModel1Provider)
        .put(ScheduleChildModel2.class, (Provider) scheduleChildModel2Provider)
        .put(ScheduleChildModel3.class, (Provider) scheduleChildModel3Provider)
        .put(ScheduleChildModel4.class, (Provider) scheduleChildModel4Provider)
        .put(ScheduleChildModel5.class, (Provider) scheduleChildModel5Provider)
        .put(ScheduleChildModel6.class, (Provider) scheduleChildModel6Provider)
        .put(ScheduleChildModel7.class, (Provider) scheduleChildModel7Provider)
        .put(MainViewModel.class, (Provider) MainViewModel_Factory.create())
        .build();
  }

  private ViewModelFactory getViewModelFactory() {
    return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());
  }

  @SuppressWarnings("unchecked")
  private void initialize(
      final NetworkModule networkModuleParam, final Application applicationParam) {
    this.mainActivitySubcomponentBuilderProvider =
        new Provider<ActivityBindingModule_BindMainActivity.MainActivitySubcomponent.Builder>() {
          @Override
          public ActivityBindingModule_BindMainActivity.MainActivitySubcomponent.Builder get() {
            return new MainActivitySubcomponentBuilder();
          }
        };
    this.splashFragmentSubcomponentBuilderProvider =
        new Provider<
            FragmentBindingModule_BindSplashFragment.SplashFragmentSubcomponent.Builder>() {
          @Override
          public FragmentBindingModule_BindSplashFragment.SplashFragmentSubcomponent.Builder get() {
            return new SplashFragmentSubcomponentBuilder();
          }
        };
    this.homeFragmentSubcomponentBuilderProvider =
        new Provider<FragmentBindingModule_BindHomeFragment.HomeFragmentSubcomponent.Builder>() {
          @Override
          public FragmentBindingModule_BindHomeFragment.HomeFragmentSubcomponent.Builder get() {
            return new HomeFragmentSubcomponentBuilder();
          }
        };
    this.accountFragmentSubcomponentBuilderProvider =
        new Provider<
            FragmentBindingModule_BindAccountFragment.AccountFragmentSubcomponent.Builder>() {
          @Override
          public FragmentBindingModule_BindAccountFragment.AccountFragmentSubcomponent.Builder
              get() {
            return new AccountFragmentSubcomponentBuilder();
          }
        };
    this.theaterFragmentSubcomponentBuilderProvider =
        new Provider<
            FragmentBindingModule_BindTheaterFragment.TheaterFragmentSubcomponent.Builder>() {
          @Override
          public FragmentBindingModule_BindTheaterFragment.TheaterFragmentSubcomponent.Builder
              get() {
            return new TheaterFragmentSubcomponentBuilder();
          }
        };
    this.filmInfoFragmentSubcomponentBuilderProvider =
        new Provider<
            FragmentBindingModule_BindFilmInfoFragment.FilmInfoFragmentSubcomponent.Builder>() {
          @Override
          public FragmentBindingModule_BindFilmInfoFragment.FilmInfoFragmentSubcomponent.Builder
              get() {
            return new FilmInfoFragmentSubcomponentBuilder();
          }
        };
    this.filmInfoChildFragmentSubcomponentBuilderProvider =
        new Provider<
            FragmentBindingModule_BindFilmInfoChildFragment.FilmInfoChildFragmentSubcomponent
                .Builder>() {
          @Override
          public FragmentBindingModule_BindFilmInfoChildFragment.FilmInfoChildFragmentSubcomponent
                  .Builder
              get() {
            return new FilmInfoChildFragmentSubcomponentBuilder();
          }
        };
    this.signUpFragmentSubcomponentBuilderProvider =
        new Provider<
            FragmentBindingModule_BindSignUpFragment.SignUpFragmentSubcomponent.Builder>() {
          @Override
          public FragmentBindingModule_BindSignUpFragment.SignUpFragmentSubcomponent.Builder get() {
            return new SignUpFragmentSubcomponentBuilder();
          }
        };
    this.signInFragmentSubcomponentBuilderProvider =
        new Provider<
            FragmentBindingModule_BindSignInFragment.SignInFragmentSubcomponent.Builder>() {
          @Override
          public FragmentBindingModule_BindSignInFragment.SignInFragmentSubcomponent.Builder get() {
            return new SignInFragmentSubcomponentBuilder();
          }
        };
    this.chonGheFragmentSubcomponentBuilderProvider =
        new Provider<
            FragmentBindingModule_BindChonGheFragment.ChonGheFragmentSubcomponent.Builder>() {
          @Override
          public FragmentBindingModule_BindChonGheFragment.ChonGheFragmentSubcomponent.Builder
              get() {
            return new ChonGheFragmentSubcomponentBuilder();
          }
        };
    this.showTimeFragmentSubcomponentBuilderProvider =
        new Provider<
            FragmentBindingModule_BindShowTimeFragment.ShowTimeFragmentSubcomponent.Builder>() {
          @Override
          public FragmentBindingModule_BindShowTimeFragment.ShowTimeFragmentSubcomponent.Builder
              get() {
            return new ShowTimeFragmentSubcomponentBuilder();
          }
        };
    this.showTimeChildFragmentSubcomponentBuilderProvider =
        new Provider<
            FragmentBindingModule_BindShowTimeChildFragment.ShowTimeChildFragmentSubcomponent
                .Builder>() {
          @Override
          public FragmentBindingModule_BindShowTimeChildFragment.ShowTimeChildFragmentSubcomponent
                  .Builder
              get() {
            return new ShowTimeChildFragmentSubcomponentBuilder();
          }
        };
    this.detailMovieFragmentSubcomponentBuilderProvider =
        new Provider<
            FragmentBindingModule_BindDetailMovieFragment.DetailMovieFragmentSubcomponent
                .Builder>() {
          @Override
          public FragmentBindingModule_BindDetailMovieFragment.DetailMovieFragmentSubcomponent
                  .Builder
              get() {
            return new DetailMovieFragmentSubcomponentBuilder();
          }
        };
    this.thanhToanFragmentSubcomponentBuilderProvider =
        new Provider<
            FragmentBindingModule_BindThanhToanFragment.ThanhToanFragmentSubcomponent.Builder>() {
          @Override
          public FragmentBindingModule_BindThanhToanFragment.ThanhToanFragmentSubcomponent.Builder
              get() {
            return new ThanhToanFragmentSubcomponentBuilder();
          }
        };
    this.changePassFragmentSubcomponentBuilderProvider =
        new Provider<
            FragmentBindingModule_BindChangePassFragment.ChangePassFragmentSubcomponent.Builder>() {
          @Override
          public FragmentBindingModule_BindChangePassFragment.ChangePassFragmentSubcomponent.Builder
              get() {
            return new ChangePassFragmentSubcomponentBuilder();
          }
        };
    this.thongTinThanhToanFragmentSubcomponentBuilderProvider =
        new Provider<
            FragmentBindingModule_BindThongTinThanhToanFragment
                .ThongTinThanhToanFragmentSubcomponent.Builder>() {
          @Override
          public FragmentBindingModule_BindThongTinThanhToanFragment
                  .ThongTinThanhToanFragmentSubcomponent.Builder
              get() {
            return new ThongTinThanhToanFragmentSubcomponentBuilder();
          }
        };
    this.giaoDichFragmentSubcomponentBuilderProvider =
        new Provider<
            FragmentBindingModule_BindGiaoDichFragment.GiaoDichFragmentSubcomponent.Builder>() {
          @Override
          public FragmentBindingModule_BindGiaoDichFragment.GiaoDichFragmentSubcomponent.Builder
              get() {
            return new GiaoDichFragmentSubcomponentBuilder();
          }
        };
    this.userInfoFragmentSubcomponentBuilderProvider =
        new Provider<
            FragmentBindingModule_BindUserInfoFragment.UserInfoFragmentSubcomponent.Builder>() {
          @Override
          public FragmentBindingModule_BindUserInfoFragment.UserInfoFragmentSubcomponent.Builder
              get() {
            return new UserInfoFragmentSubcomponentBuilder();
          }
        };
    this.movieByCategoryIdFragmentSubcomponentBuilderProvider =
        new Provider<
            FragmentBindingModule_BindMovieByCategoryIdFragment
                .MovieByCategoryIdFragmentSubcomponent.Builder>() {
          @Override
          public FragmentBindingModule_BindMovieByCategoryIdFragment
                  .MovieByCategoryIdFragmentSubcomponent.Builder
              get() {
            return new MovieByCategoryIdFragmentSubcomponentBuilder();
          }
        };
    this.searchFilmFragmentSubcomponentBuilderProvider =
        new Provider<
            FragmentBindingModule_BindSearchFragment.SearchFilmFragmentSubcomponent.Builder>() {
          @Override
          public FragmentBindingModule_BindSearchFragment.SearchFilmFragmentSubcomponent.Builder
              get() {
            return new SearchFilmFragmentSubcomponentBuilder();
          }
        };
    this.scheduleCinemaFragmentSubcomponentBuilderProvider =
        new Provider<
            FragmentBindingModule_BindScheduleFragment.ScheduleCinemaFragmentSubcomponent
                .Builder>() {
          @Override
          public FragmentBindingModule_BindScheduleFragment.ScheduleCinemaFragmentSubcomponent
                  .Builder
              get() {
            return new ScheduleCinemaFragmentSubcomponentBuilder();
          }
        };
    this.scheduleChildFragment1SubcomponentBuilderProvider =
        new Provider<
            FragmentBindingModule_BindScheduleChildFragment1.ScheduleChildFragment1Subcomponent
                .Builder>() {
          @Override
          public FragmentBindingModule_BindScheduleChildFragment1.ScheduleChildFragment1Subcomponent
                  .Builder
              get() {
            return new ScheduleChildFragment1SubcomponentBuilder();
          }
        };
    this.scheduleChildFragment2SubcomponentBuilderProvider =
        new Provider<
            FragmentBindingModule_BindScheduleChildFragment2.ScheduleChildFragment2Subcomponent
                .Builder>() {
          @Override
          public FragmentBindingModule_BindScheduleChildFragment2.ScheduleChildFragment2Subcomponent
                  .Builder
              get() {
            return new ScheduleChildFragment2SubcomponentBuilder();
          }
        };
    this.scheduleChildFragment3SubcomponentBuilderProvider =
        new Provider<
            FragmentBindingModule_BindScheduleChildFragment3.ScheduleChildFragment3Subcomponent
                .Builder>() {
          @Override
          public FragmentBindingModule_BindScheduleChildFragment3.ScheduleChildFragment3Subcomponent
                  .Builder
              get() {
            return new ScheduleChildFragment3SubcomponentBuilder();
          }
        };
    this.scheduleChildFragment4SubcomponentBuilderProvider =
        new Provider<
            FragmentBindingModule_BindScheduleChildFragment4.ScheduleChildFragment4Subcomponent
                .Builder>() {
          @Override
          public FragmentBindingModule_BindScheduleChildFragment4.ScheduleChildFragment4Subcomponent
                  .Builder
              get() {
            return new ScheduleChildFragment4SubcomponentBuilder();
          }
        };
    this.scheduleChildFragment5SubcomponentBuilderProvider =
        new Provider<
            FragmentBindingModule_BindScheduleChildFragment5.ScheduleChildFragment5Subcomponent
                .Builder>() {
          @Override
          public FragmentBindingModule_BindScheduleChildFragment5.ScheduleChildFragment5Subcomponent
                  .Builder
              get() {
            return new ScheduleChildFragment5SubcomponentBuilder();
          }
        };
    this.scheduleChildFragment6SubcomponentBuilderProvider =
        new Provider<
            FragmentBindingModule_BindScheduleChildFragment6.ScheduleChildFragment6Subcomponent
                .Builder>() {
          @Override
          public FragmentBindingModule_BindScheduleChildFragment6.ScheduleChildFragment6Subcomponent
                  .Builder
              get() {
            return new ScheduleChildFragment6SubcomponentBuilder();
          }
        };
    this.scheduleChildFragment7SubcomponentBuilderProvider =
        new Provider<
            FragmentBindingModule_BindScheduleChildFragment7.ScheduleChildFragment7Subcomponent
                .Builder>() {
          @Override
          public FragmentBindingModule_BindScheduleChildFragment7.ScheduleChildFragment7Subcomponent
                  .Builder
              get() {
            return new ScheduleChildFragment7SubcomponentBuilder();
          }
        };
    this.applicationProvider = InstanceFactory.create(applicationParam);
    this.provideContextProvider = DoubleCheck.provider((Provider) applicationProvider);
    this.provideHttpClientProvider =
        DoubleCheck.provider(
            NetworkModule_ProvideHttpClientFactory.create(
                networkModuleParam, provideContextProvider));
    this.provideApiInterfaceProvider =
        DoubleCheck.provider(
            NetworkModule_ProvideApiInterfaceFactory.create(
                networkModuleParam, provideHttpClientProvider));
    this.repositoryProvider = Repository_Factory.create(provideApiInterfaceProvider);
    this.movieByCategoryIdModelProvider = MovieByCategoryIdModel_Factory.create(repositoryProvider);
    this.searchFilmModelProvider = SearchFilmModel_Factory.create(repositoryProvider);
    this.homeViewModelProvider = HomeViewModel_Factory.create(repositoryProvider);
    this.accountViewModelProvider = AccountViewModel_Factory.create(repositoryProvider);
    this.theaterViewModelProvider = TheaterViewModel_Factory.create(repositoryProvider);
    this.signUpViewModelProvider = SignUpViewModel_Factory.create(repositoryProvider);
    this.signInViewModelProvider = SignInViewModel_Factory.create(repositoryProvider);
    this.chonGheViewModelProvider = ChonGheViewModel_Factory.create(repositoryProvider);
    this.showTimeChildViewModelProvider = ShowTimeChildViewModel_Factory.create(repositoryProvider);
    this.thanhToanViewModelProvider = ThanhToanViewModel_Factory.create(repositoryProvider);
    this.thongTinThanhToanViewModelProvider =
        ThongTinThanhToanViewModel_Factory.create(repositoryProvider);
    this.giaoDichViewModelProvider = GiaoDichViewModel_Factory.create(repositoryProvider);
    this.userInfoViewModelProvider = UserInfoViewModel_Factory.create(repositoryProvider);
    this.detailMovieViewModelProvider = DetailMovieViewModel_Factory.create(repositoryProvider);
    this.changePassViewModelProvider = ChangePassViewModel_Factory.create(repositoryProvider);
    this.scheduleCinemaModelProvider = ScheduleCinemaModel_Factory.create(repositoryProvider);
    this.scheduleChildModel1Provider = ScheduleChildModel1_Factory.create(repositoryProvider);
    this.scheduleChildModel2Provider = ScheduleChildModel2_Factory.create(repositoryProvider);
    this.scheduleChildModel3Provider = ScheduleChildModel3_Factory.create(repositoryProvider);
    this.scheduleChildModel4Provider = ScheduleChildModel4_Factory.create(repositoryProvider);
    this.scheduleChildModel5Provider = ScheduleChildModel5_Factory.create(repositoryProvider);
    this.scheduleChildModel6Provider = ScheduleChildModel6_Factory.create(repositoryProvider);
    this.scheduleChildModel7Provider = ScheduleChildModel7_Factory.create(repositoryProvider);
  }

  @Override
  public void inject(BaseApplication baseApplication) {
    injectBaseApplication(baseApplication);
  }

  private BaseApplication injectBaseApplication(BaseApplication instance) {
    BaseApplication_MembersInjector.injectDispatchingAndroidInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private NetworkModule networkModule;

    private Application application;

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public AppComponent build() {
      if (networkModule == null) {
        this.networkModule = new NetworkModule();
      }
      Preconditions.checkBuilderRequirement(application, Application.class);
      return new DaggerAppComponent(networkModule, application);
    }
  }

  private final class MainActivitySubcomponentBuilder
      extends ActivityBindingModule_BindMainActivity.MainActivitySubcomponent.Builder {
    private MainActivity seedInstance;

    @Override
    public void seedInstance(MainActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }

    @Override
    public ActivityBindingModule_BindMainActivity.MainActivitySubcomponent build() {
      Preconditions.checkBuilderRequirement(seedInstance, MainActivity.class);
      return new MainActivitySubcomponentImpl(seedInstance);
    }
  }

  private final class MainActivitySubcomponentImpl
      implements ActivityBindingModule_BindMainActivity.MainActivitySubcomponent {
    private MainActivitySubcomponentImpl(MainActivity seedInstance) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    private DispatchingAndroidInjector<android.app.Fragment>
        getDispatchingAndroidInjectorOfFragment2() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectSupportFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      DaggerAppCompatActivity_MembersInjector.injectFrameworkFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment2());
      return instance;
    }
  }

  private final class SplashFragmentSubcomponentBuilder
      extends FragmentBindingModule_BindSplashFragment.SplashFragmentSubcomponent.Builder {
    private SplashFragment seedInstance;

    @Override
    public void seedInstance(SplashFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }

    @Override
    public FragmentBindingModule_BindSplashFragment.SplashFragmentSubcomponent build() {
      Preconditions.checkBuilderRequirement(seedInstance, SplashFragment.class);
      return new SplashFragmentSubcomponentImpl(seedInstance);
    }
  }

  private final class SplashFragmentSubcomponentImpl
      implements FragmentBindingModule_BindSplashFragment.SplashFragmentSubcomponent {
    private SplashFragmentSubcomponentImpl(SplashFragment seedInstance) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(SplashFragment arg0) {
      injectSplashFragment(arg0);
    }

    private SplashFragment injectSplashFragment(SplashFragment instance) {
      DaggerFragment_MembersInjector.injectChildFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      BaseFragment_MembersInjector.injectViewModelFactory(
          instance, DaggerAppComponent.this.getViewModelFactory());
      return instance;
    }
  }

  private final class HomeFragmentSubcomponentBuilder
      extends FragmentBindingModule_BindHomeFragment.HomeFragmentSubcomponent.Builder {
    private HomeFragment seedInstance;

    @Override
    public void seedInstance(HomeFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }

    @Override
    public FragmentBindingModule_BindHomeFragment.HomeFragmentSubcomponent build() {
      Preconditions.checkBuilderRequirement(seedInstance, HomeFragment.class);
      return new HomeFragmentSubcomponentImpl(seedInstance);
    }
  }

  private final class HomeFragmentSubcomponentImpl
      implements FragmentBindingModule_BindHomeFragment.HomeFragmentSubcomponent {
    private HomeFragmentSubcomponentImpl(HomeFragment seedInstance) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(HomeFragment arg0) {
      injectHomeFragment(arg0);
    }

    private HomeFragment injectHomeFragment(HomeFragment instance) {
      DaggerFragment_MembersInjector.injectChildFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      BaseFragment_MembersInjector.injectViewModelFactory(
          instance, DaggerAppComponent.this.getViewModelFactory());
      return instance;
    }
  }

  private final class AccountFragmentSubcomponentBuilder
      extends FragmentBindingModule_BindAccountFragment.AccountFragmentSubcomponent.Builder {
    private AccountFragment seedInstance;

    @Override
    public void seedInstance(AccountFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }

    @Override
    public FragmentBindingModule_BindAccountFragment.AccountFragmentSubcomponent build() {
      Preconditions.checkBuilderRequirement(seedInstance, AccountFragment.class);
      return new AccountFragmentSubcomponentImpl(seedInstance);
    }
  }

  private final class AccountFragmentSubcomponentImpl
      implements FragmentBindingModule_BindAccountFragment.AccountFragmentSubcomponent {
    private AccountFragmentSubcomponentImpl(AccountFragment seedInstance) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(AccountFragment arg0) {
      injectAccountFragment(arg0);
    }

    private AccountFragment injectAccountFragment(AccountFragment instance) {
      DaggerFragment_MembersInjector.injectChildFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      BaseFragment_MembersInjector.injectViewModelFactory(
          instance, DaggerAppComponent.this.getViewModelFactory());
      return instance;
    }
  }

  private final class TheaterFragmentSubcomponentBuilder
      extends FragmentBindingModule_BindTheaterFragment.TheaterFragmentSubcomponent.Builder {
    private TheaterFragment seedInstance;

    @Override
    public void seedInstance(TheaterFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }

    @Override
    public FragmentBindingModule_BindTheaterFragment.TheaterFragmentSubcomponent build() {
      Preconditions.checkBuilderRequirement(seedInstance, TheaterFragment.class);
      return new TheaterFragmentSubcomponentImpl(seedInstance);
    }
  }

  private final class TheaterFragmentSubcomponentImpl
      implements FragmentBindingModule_BindTheaterFragment.TheaterFragmentSubcomponent {
    private TheaterFragmentSubcomponentImpl(TheaterFragment seedInstance) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(TheaterFragment arg0) {
      injectTheaterFragment(arg0);
    }

    private TheaterFragment injectTheaterFragment(TheaterFragment instance) {
      DaggerFragment_MembersInjector.injectChildFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      BaseFragment_MembersInjector.injectViewModelFactory(
          instance, DaggerAppComponent.this.getViewModelFactory());
      return instance;
    }
  }

  private final class FilmInfoFragmentSubcomponentBuilder
      extends FragmentBindingModule_BindFilmInfoFragment.FilmInfoFragmentSubcomponent.Builder {
    private FilmInfoFragment seedInstance;

    @Override
    public void seedInstance(FilmInfoFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }

    @Override
    public FragmentBindingModule_BindFilmInfoFragment.FilmInfoFragmentSubcomponent build() {
      Preconditions.checkBuilderRequirement(seedInstance, FilmInfoFragment.class);
      return new FilmInfoFragmentSubcomponentImpl(seedInstance);
    }
  }

  private final class FilmInfoFragmentSubcomponentImpl
      implements FragmentBindingModule_BindFilmInfoFragment.FilmInfoFragmentSubcomponent {
    private FilmInfoFragmentSubcomponentImpl(FilmInfoFragment seedInstance) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(FilmInfoFragment arg0) {
      injectFilmInfoFragment(arg0);
    }

    private FilmInfoFragment injectFilmInfoFragment(FilmInfoFragment instance) {
      DaggerFragment_MembersInjector.injectChildFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      BaseFragment_MembersInjector.injectViewModelFactory(
          instance, DaggerAppComponent.this.getViewModelFactory());
      return instance;
    }
  }

  private final class FilmInfoChildFragmentSubcomponentBuilder
      extends FragmentBindingModule_BindFilmInfoChildFragment.FilmInfoChildFragmentSubcomponent
          .Builder {
    private FilmInfoChildFragment seedInstance;

    @Override
    public void seedInstance(FilmInfoChildFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }

    @Override
    public FragmentBindingModule_BindFilmInfoChildFragment.FilmInfoChildFragmentSubcomponent
        build() {
      Preconditions.checkBuilderRequirement(seedInstance, FilmInfoChildFragment.class);
      return new FilmInfoChildFragmentSubcomponentImpl(seedInstance);
    }
  }

  private final class FilmInfoChildFragmentSubcomponentImpl
      implements FragmentBindingModule_BindFilmInfoChildFragment.FilmInfoChildFragmentSubcomponent {
    private FilmInfoChildFragmentSubcomponentImpl(FilmInfoChildFragment seedInstance) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(FilmInfoChildFragment arg0) {
      injectFilmInfoChildFragment(arg0);
    }

    private FilmInfoChildFragment injectFilmInfoChildFragment(FilmInfoChildFragment instance) {
      DaggerFragment_MembersInjector.injectChildFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      BaseFragment_MembersInjector.injectViewModelFactory(
          instance, DaggerAppComponent.this.getViewModelFactory());
      return instance;
    }
  }

  private final class SignUpFragmentSubcomponentBuilder
      extends FragmentBindingModule_BindSignUpFragment.SignUpFragmentSubcomponent.Builder {
    private SignUpFragment seedInstance;

    @Override
    public void seedInstance(SignUpFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }

    @Override
    public FragmentBindingModule_BindSignUpFragment.SignUpFragmentSubcomponent build() {
      Preconditions.checkBuilderRequirement(seedInstance, SignUpFragment.class);
      return new SignUpFragmentSubcomponentImpl(seedInstance);
    }
  }

  private final class SignUpFragmentSubcomponentImpl
      implements FragmentBindingModule_BindSignUpFragment.SignUpFragmentSubcomponent {
    private SignUpFragmentSubcomponentImpl(SignUpFragment seedInstance) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(SignUpFragment arg0) {
      injectSignUpFragment(arg0);
    }

    private SignUpFragment injectSignUpFragment(SignUpFragment instance) {
      DaggerFragment_MembersInjector.injectChildFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      BaseFragment_MembersInjector.injectViewModelFactory(
          instance, DaggerAppComponent.this.getViewModelFactory());
      return instance;
    }
  }

  private final class SignInFragmentSubcomponentBuilder
      extends FragmentBindingModule_BindSignInFragment.SignInFragmentSubcomponent.Builder {
    private SignInFragment seedInstance;

    @Override
    public void seedInstance(SignInFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }

    @Override
    public FragmentBindingModule_BindSignInFragment.SignInFragmentSubcomponent build() {
      Preconditions.checkBuilderRequirement(seedInstance, SignInFragment.class);
      return new SignInFragmentSubcomponentImpl(seedInstance);
    }
  }

  private final class SignInFragmentSubcomponentImpl
      implements FragmentBindingModule_BindSignInFragment.SignInFragmentSubcomponent {
    private SignInFragmentSubcomponentImpl(SignInFragment seedInstance) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(SignInFragment arg0) {
      injectSignInFragment(arg0);
    }

    private SignInFragment injectSignInFragment(SignInFragment instance) {
      DaggerFragment_MembersInjector.injectChildFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      BaseFragment_MembersInjector.injectViewModelFactory(
          instance, DaggerAppComponent.this.getViewModelFactory());
      return instance;
    }
  }

  private final class ChonGheFragmentSubcomponentBuilder
      extends FragmentBindingModule_BindChonGheFragment.ChonGheFragmentSubcomponent.Builder {
    private ChonGheFragment seedInstance;

    @Override
    public void seedInstance(ChonGheFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }

    @Override
    public FragmentBindingModule_BindChonGheFragment.ChonGheFragmentSubcomponent build() {
      Preconditions.checkBuilderRequirement(seedInstance, ChonGheFragment.class);
      return new ChonGheFragmentSubcomponentImpl(seedInstance);
    }
  }

  private final class ChonGheFragmentSubcomponentImpl
      implements FragmentBindingModule_BindChonGheFragment.ChonGheFragmentSubcomponent {
    private ChonGheFragmentSubcomponentImpl(ChonGheFragment seedInstance) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(ChonGheFragment arg0) {
      injectChonGheFragment(arg0);
    }

    private ChonGheFragment injectChonGheFragment(ChonGheFragment instance) {
      DaggerFragment_MembersInjector.injectChildFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      BaseFragment_MembersInjector.injectViewModelFactory(
          instance, DaggerAppComponent.this.getViewModelFactory());
      return instance;
    }
  }

  private final class ShowTimeFragmentSubcomponentBuilder
      extends FragmentBindingModule_BindShowTimeFragment.ShowTimeFragmentSubcomponent.Builder {
    private ShowTimeFragment seedInstance;

    @Override
    public void seedInstance(ShowTimeFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }

    @Override
    public FragmentBindingModule_BindShowTimeFragment.ShowTimeFragmentSubcomponent build() {
      Preconditions.checkBuilderRequirement(seedInstance, ShowTimeFragment.class);
      return new ShowTimeFragmentSubcomponentImpl(seedInstance);
    }
  }

  private final class ShowTimeFragmentSubcomponentImpl
      implements FragmentBindingModule_BindShowTimeFragment.ShowTimeFragmentSubcomponent {
    private ShowTimeFragmentSubcomponentImpl(ShowTimeFragment seedInstance) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(ShowTimeFragment arg0) {
      injectShowTimeFragment(arg0);
    }

    private ShowTimeFragment injectShowTimeFragment(ShowTimeFragment instance) {
      DaggerFragment_MembersInjector.injectChildFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      BaseFragment_MembersInjector.injectViewModelFactory(
          instance, DaggerAppComponent.this.getViewModelFactory());
      return instance;
    }
  }

  private final class ShowTimeChildFragmentSubcomponentBuilder
      extends FragmentBindingModule_BindShowTimeChildFragment.ShowTimeChildFragmentSubcomponent
          .Builder {
    private ShowTimeChildFragment seedInstance;

    @Override
    public void seedInstance(ShowTimeChildFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }

    @Override
    public FragmentBindingModule_BindShowTimeChildFragment.ShowTimeChildFragmentSubcomponent
        build() {
      Preconditions.checkBuilderRequirement(seedInstance, ShowTimeChildFragment.class);
      return new ShowTimeChildFragmentSubcomponentImpl(seedInstance);
    }
  }

  private final class ShowTimeChildFragmentSubcomponentImpl
      implements FragmentBindingModule_BindShowTimeChildFragment.ShowTimeChildFragmentSubcomponent {
    private ShowTimeChildFragmentSubcomponentImpl(ShowTimeChildFragment seedInstance) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(ShowTimeChildFragment arg0) {
      injectShowTimeChildFragment(arg0);
    }

    private ShowTimeChildFragment injectShowTimeChildFragment(ShowTimeChildFragment instance) {
      DaggerFragment_MembersInjector.injectChildFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      BaseFragment_MembersInjector.injectViewModelFactory(
          instance, DaggerAppComponent.this.getViewModelFactory());
      return instance;
    }
  }

  private final class DetailMovieFragmentSubcomponentBuilder
      extends FragmentBindingModule_BindDetailMovieFragment.DetailMovieFragmentSubcomponent
          .Builder {
    private DetailMovieFragment seedInstance;

    @Override
    public void seedInstance(DetailMovieFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }

    @Override
    public FragmentBindingModule_BindDetailMovieFragment.DetailMovieFragmentSubcomponent build() {
      Preconditions.checkBuilderRequirement(seedInstance, DetailMovieFragment.class);
      return new DetailMovieFragmentSubcomponentImpl(seedInstance);
    }
  }

  private final class DetailMovieFragmentSubcomponentImpl
      implements FragmentBindingModule_BindDetailMovieFragment.DetailMovieFragmentSubcomponent {
    private DetailMovieFragmentSubcomponentImpl(DetailMovieFragment seedInstance) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(DetailMovieFragment arg0) {
      injectDetailMovieFragment(arg0);
    }

    private DetailMovieFragment injectDetailMovieFragment(DetailMovieFragment instance) {
      DaggerFragment_MembersInjector.injectChildFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      BaseFragment_MembersInjector.injectViewModelFactory(
          instance, DaggerAppComponent.this.getViewModelFactory());
      return instance;
    }
  }

  private final class ThanhToanFragmentSubcomponentBuilder
      extends FragmentBindingModule_BindThanhToanFragment.ThanhToanFragmentSubcomponent.Builder {
    private ThanhToanFragment seedInstance;

    @Override
    public void seedInstance(ThanhToanFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }

    @Override
    public FragmentBindingModule_BindThanhToanFragment.ThanhToanFragmentSubcomponent build() {
      Preconditions.checkBuilderRequirement(seedInstance, ThanhToanFragment.class);
      return new ThanhToanFragmentSubcomponentImpl(seedInstance);
    }
  }

  private final class ThanhToanFragmentSubcomponentImpl
      implements FragmentBindingModule_BindThanhToanFragment.ThanhToanFragmentSubcomponent {
    private ThanhToanFragmentSubcomponentImpl(ThanhToanFragment seedInstance) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(ThanhToanFragment arg0) {
      injectThanhToanFragment(arg0);
    }

    private ThanhToanFragment injectThanhToanFragment(ThanhToanFragment instance) {
      DaggerFragment_MembersInjector.injectChildFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      BaseFragment_MembersInjector.injectViewModelFactory(
          instance, DaggerAppComponent.this.getViewModelFactory());
      return instance;
    }
  }

  private final class ChangePassFragmentSubcomponentBuilder
      extends FragmentBindingModule_BindChangePassFragment.ChangePassFragmentSubcomponent.Builder {
    private ChangePassFragment seedInstance;

    @Override
    public void seedInstance(ChangePassFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }

    @Override
    public FragmentBindingModule_BindChangePassFragment.ChangePassFragmentSubcomponent build() {
      Preconditions.checkBuilderRequirement(seedInstance, ChangePassFragment.class);
      return new ChangePassFragmentSubcomponentImpl(seedInstance);
    }
  }

  private final class ChangePassFragmentSubcomponentImpl
      implements FragmentBindingModule_BindChangePassFragment.ChangePassFragmentSubcomponent {
    private ChangePassFragmentSubcomponentImpl(ChangePassFragment seedInstance) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(ChangePassFragment arg0) {
      injectChangePassFragment(arg0);
    }

    private ChangePassFragment injectChangePassFragment(ChangePassFragment instance) {
      DaggerFragment_MembersInjector.injectChildFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      BaseFragment_MembersInjector.injectViewModelFactory(
          instance, DaggerAppComponent.this.getViewModelFactory());
      return instance;
    }
  }

  private final class ThongTinThanhToanFragmentSubcomponentBuilder
      extends FragmentBindingModule_BindThongTinThanhToanFragment
          .ThongTinThanhToanFragmentSubcomponent.Builder {
    private ThongTinThanhToanFragment seedInstance;

    @Override
    public void seedInstance(ThongTinThanhToanFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }

    @Override
    public FragmentBindingModule_BindThongTinThanhToanFragment.ThongTinThanhToanFragmentSubcomponent
        build() {
      Preconditions.checkBuilderRequirement(seedInstance, ThongTinThanhToanFragment.class);
      return new ThongTinThanhToanFragmentSubcomponentImpl(seedInstance);
    }
  }

  private final class ThongTinThanhToanFragmentSubcomponentImpl
      implements FragmentBindingModule_BindThongTinThanhToanFragment
          .ThongTinThanhToanFragmentSubcomponent {
    private ThongTinThanhToanFragmentSubcomponentImpl(ThongTinThanhToanFragment seedInstance) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(ThongTinThanhToanFragment arg0) {
      injectThongTinThanhToanFragment(arg0);
    }

    private ThongTinThanhToanFragment injectThongTinThanhToanFragment(
        ThongTinThanhToanFragment instance) {
      DaggerFragment_MembersInjector.injectChildFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      BaseFragment_MembersInjector.injectViewModelFactory(
          instance, DaggerAppComponent.this.getViewModelFactory());
      return instance;
    }
  }

  private final class GiaoDichFragmentSubcomponentBuilder
      extends FragmentBindingModule_BindGiaoDichFragment.GiaoDichFragmentSubcomponent.Builder {
    private GiaoDichFragment seedInstance;

    @Override
    public void seedInstance(GiaoDichFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }

    @Override
    public FragmentBindingModule_BindGiaoDichFragment.GiaoDichFragmentSubcomponent build() {
      Preconditions.checkBuilderRequirement(seedInstance, GiaoDichFragment.class);
      return new GiaoDichFragmentSubcomponentImpl(seedInstance);
    }
  }

  private final class GiaoDichFragmentSubcomponentImpl
      implements FragmentBindingModule_BindGiaoDichFragment.GiaoDichFragmentSubcomponent {
    private GiaoDichFragmentSubcomponentImpl(GiaoDichFragment seedInstance) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(GiaoDichFragment arg0) {
      injectGiaoDichFragment(arg0);
    }

    private GiaoDichFragment injectGiaoDichFragment(GiaoDichFragment instance) {
      DaggerFragment_MembersInjector.injectChildFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      BaseFragment_MembersInjector.injectViewModelFactory(
          instance, DaggerAppComponent.this.getViewModelFactory());
      return instance;
    }
  }

  private final class UserInfoFragmentSubcomponentBuilder
      extends FragmentBindingModule_BindUserInfoFragment.UserInfoFragmentSubcomponent.Builder {
    private UserInfoFragment seedInstance;

    @Override
    public void seedInstance(UserInfoFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }

    @Override
    public FragmentBindingModule_BindUserInfoFragment.UserInfoFragmentSubcomponent build() {
      Preconditions.checkBuilderRequirement(seedInstance, UserInfoFragment.class);
      return new UserInfoFragmentSubcomponentImpl(seedInstance);
    }
  }

  private final class UserInfoFragmentSubcomponentImpl
      implements FragmentBindingModule_BindUserInfoFragment.UserInfoFragmentSubcomponent {
    private UserInfoFragmentSubcomponentImpl(UserInfoFragment seedInstance) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(UserInfoFragment arg0) {
      injectUserInfoFragment(arg0);
    }

    private UserInfoFragment injectUserInfoFragment(UserInfoFragment instance) {
      DaggerFragment_MembersInjector.injectChildFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      BaseFragment_MembersInjector.injectViewModelFactory(
          instance, DaggerAppComponent.this.getViewModelFactory());
      return instance;
    }
  }

  private final class MovieByCategoryIdFragmentSubcomponentBuilder
      extends FragmentBindingModule_BindMovieByCategoryIdFragment
          .MovieByCategoryIdFragmentSubcomponent.Builder {
    private MovieByCategoryIdFragment seedInstance;

    @Override
    public void seedInstance(MovieByCategoryIdFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }

    @Override
    public FragmentBindingModule_BindMovieByCategoryIdFragment.MovieByCategoryIdFragmentSubcomponent
        build() {
      Preconditions.checkBuilderRequirement(seedInstance, MovieByCategoryIdFragment.class);
      return new MovieByCategoryIdFragmentSubcomponentImpl(seedInstance);
    }
  }

  private final class MovieByCategoryIdFragmentSubcomponentImpl
      implements FragmentBindingModule_BindMovieByCategoryIdFragment
          .MovieByCategoryIdFragmentSubcomponent {
    private MovieByCategoryIdFragmentSubcomponentImpl(MovieByCategoryIdFragment seedInstance) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(MovieByCategoryIdFragment arg0) {
      injectMovieByCategoryIdFragment(arg0);
    }

    private MovieByCategoryIdFragment injectMovieByCategoryIdFragment(
        MovieByCategoryIdFragment instance) {
      DaggerFragment_MembersInjector.injectChildFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      BaseFragment_MembersInjector.injectViewModelFactory(
          instance, DaggerAppComponent.this.getViewModelFactory());
      return instance;
    }
  }

  private final class SearchFilmFragmentSubcomponentBuilder
      extends FragmentBindingModule_BindSearchFragment.SearchFilmFragmentSubcomponent.Builder {
    private SearchFilmFragment seedInstance;

    @Override
    public void seedInstance(SearchFilmFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }

    @Override
    public FragmentBindingModule_BindSearchFragment.SearchFilmFragmentSubcomponent build() {
      Preconditions.checkBuilderRequirement(seedInstance, SearchFilmFragment.class);
      return new SearchFilmFragmentSubcomponentImpl(seedInstance);
    }
  }

  private final class SearchFilmFragmentSubcomponentImpl
      implements FragmentBindingModule_BindSearchFragment.SearchFilmFragmentSubcomponent {
    private SearchFilmFragmentSubcomponentImpl(SearchFilmFragment seedInstance) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(SearchFilmFragment arg0) {
      injectSearchFilmFragment(arg0);
    }

    private SearchFilmFragment injectSearchFilmFragment(SearchFilmFragment instance) {
      DaggerFragment_MembersInjector.injectChildFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      BaseFragment_MembersInjector.injectViewModelFactory(
          instance, DaggerAppComponent.this.getViewModelFactory());
      return instance;
    }
  }

  private final class ScheduleCinemaFragmentSubcomponentBuilder
      extends FragmentBindingModule_BindScheduleFragment.ScheduleCinemaFragmentSubcomponent
          .Builder {
    private ScheduleCinemaFragment seedInstance;

    @Override
    public void seedInstance(ScheduleCinemaFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }

    @Override
    public FragmentBindingModule_BindScheduleFragment.ScheduleCinemaFragmentSubcomponent build() {
      Preconditions.checkBuilderRequirement(seedInstance, ScheduleCinemaFragment.class);
      return new ScheduleCinemaFragmentSubcomponentImpl(seedInstance);
    }
  }

  private final class ScheduleCinemaFragmentSubcomponentImpl
      implements FragmentBindingModule_BindScheduleFragment.ScheduleCinemaFragmentSubcomponent {
    private ScheduleCinemaFragmentSubcomponentImpl(ScheduleCinemaFragment seedInstance) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(ScheduleCinemaFragment arg0) {
      injectScheduleCinemaFragment(arg0);
    }

    private ScheduleCinemaFragment injectScheduleCinemaFragment(ScheduleCinemaFragment instance) {
      DaggerFragment_MembersInjector.injectChildFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      BaseFragment_MembersInjector.injectViewModelFactory(
          instance, DaggerAppComponent.this.getViewModelFactory());
      return instance;
    }
  }

  private final class ScheduleChildFragment1SubcomponentBuilder
      extends FragmentBindingModule_BindScheduleChildFragment1.ScheduleChildFragment1Subcomponent
          .Builder {
    private ScheduleChildFragment1 seedInstance;

    @Override
    public void seedInstance(ScheduleChildFragment1 arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }

    @Override
    public FragmentBindingModule_BindScheduleChildFragment1.ScheduleChildFragment1Subcomponent
        build() {
      Preconditions.checkBuilderRequirement(seedInstance, ScheduleChildFragment1.class);
      return new ScheduleChildFragment1SubcomponentImpl(seedInstance);
    }
  }

  private final class ScheduleChildFragment1SubcomponentImpl
      implements FragmentBindingModule_BindScheduleChildFragment1
          .ScheduleChildFragment1Subcomponent {
    private ScheduleChildFragment1SubcomponentImpl(ScheduleChildFragment1 seedInstance) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(ScheduleChildFragment1 arg0) {
      injectScheduleChildFragment1(arg0);
    }

    private ScheduleChildFragment1 injectScheduleChildFragment1(ScheduleChildFragment1 instance) {
      DaggerFragment_MembersInjector.injectChildFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      BaseFragment_MembersInjector.injectViewModelFactory(
          instance, DaggerAppComponent.this.getViewModelFactory());
      return instance;
    }
  }

  private final class ScheduleChildFragment2SubcomponentBuilder
      extends FragmentBindingModule_BindScheduleChildFragment2.ScheduleChildFragment2Subcomponent
          .Builder {
    private ScheduleChildFragment2 seedInstance;

    @Override
    public void seedInstance(ScheduleChildFragment2 arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }

    @Override
    public FragmentBindingModule_BindScheduleChildFragment2.ScheduleChildFragment2Subcomponent
        build() {
      Preconditions.checkBuilderRequirement(seedInstance, ScheduleChildFragment2.class);
      return new ScheduleChildFragment2SubcomponentImpl(seedInstance);
    }
  }

  private final class ScheduleChildFragment2SubcomponentImpl
      implements FragmentBindingModule_BindScheduleChildFragment2
          .ScheduleChildFragment2Subcomponent {
    private ScheduleChildFragment2SubcomponentImpl(ScheduleChildFragment2 seedInstance) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(ScheduleChildFragment2 arg0) {
      injectScheduleChildFragment2(arg0);
    }

    private ScheduleChildFragment2 injectScheduleChildFragment2(ScheduleChildFragment2 instance) {
      DaggerFragment_MembersInjector.injectChildFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      BaseFragment_MembersInjector.injectViewModelFactory(
          instance, DaggerAppComponent.this.getViewModelFactory());
      return instance;
    }
  }

  private final class ScheduleChildFragment3SubcomponentBuilder
      extends FragmentBindingModule_BindScheduleChildFragment3.ScheduleChildFragment3Subcomponent
          .Builder {
    private ScheduleChildFragment3 seedInstance;

    @Override
    public void seedInstance(ScheduleChildFragment3 arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }

    @Override
    public FragmentBindingModule_BindScheduleChildFragment3.ScheduleChildFragment3Subcomponent
        build() {
      Preconditions.checkBuilderRequirement(seedInstance, ScheduleChildFragment3.class);
      return new ScheduleChildFragment3SubcomponentImpl(seedInstance);
    }
  }

  private final class ScheduleChildFragment3SubcomponentImpl
      implements FragmentBindingModule_BindScheduleChildFragment3
          .ScheduleChildFragment3Subcomponent {
    private ScheduleChildFragment3SubcomponentImpl(ScheduleChildFragment3 seedInstance) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(ScheduleChildFragment3 arg0) {
      injectScheduleChildFragment3(arg0);
    }

    private ScheduleChildFragment3 injectScheduleChildFragment3(ScheduleChildFragment3 instance) {
      DaggerFragment_MembersInjector.injectChildFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      BaseFragment_MembersInjector.injectViewModelFactory(
          instance, DaggerAppComponent.this.getViewModelFactory());
      return instance;
    }
  }

  private final class ScheduleChildFragment4SubcomponentBuilder
      extends FragmentBindingModule_BindScheduleChildFragment4.ScheduleChildFragment4Subcomponent
          .Builder {
    private ScheduleChildFragment4 seedInstance;

    @Override
    public void seedInstance(ScheduleChildFragment4 arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }

    @Override
    public FragmentBindingModule_BindScheduleChildFragment4.ScheduleChildFragment4Subcomponent
        build() {
      Preconditions.checkBuilderRequirement(seedInstance, ScheduleChildFragment4.class);
      return new ScheduleChildFragment4SubcomponentImpl(seedInstance);
    }
  }

  private final class ScheduleChildFragment4SubcomponentImpl
      implements FragmentBindingModule_BindScheduleChildFragment4
          .ScheduleChildFragment4Subcomponent {
    private ScheduleChildFragment4SubcomponentImpl(ScheduleChildFragment4 seedInstance) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(ScheduleChildFragment4 arg0) {
      injectScheduleChildFragment4(arg0);
    }

    private ScheduleChildFragment4 injectScheduleChildFragment4(ScheduleChildFragment4 instance) {
      DaggerFragment_MembersInjector.injectChildFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      BaseFragment_MembersInjector.injectViewModelFactory(
          instance, DaggerAppComponent.this.getViewModelFactory());
      return instance;
    }
  }

  private final class ScheduleChildFragment5SubcomponentBuilder
      extends FragmentBindingModule_BindScheduleChildFragment5.ScheduleChildFragment5Subcomponent
          .Builder {
    private ScheduleChildFragment5 seedInstance;

    @Override
    public void seedInstance(ScheduleChildFragment5 arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }

    @Override
    public FragmentBindingModule_BindScheduleChildFragment5.ScheduleChildFragment5Subcomponent
        build() {
      Preconditions.checkBuilderRequirement(seedInstance, ScheduleChildFragment5.class);
      return new ScheduleChildFragment5SubcomponentImpl(seedInstance);
    }
  }

  private final class ScheduleChildFragment5SubcomponentImpl
      implements FragmentBindingModule_BindScheduleChildFragment5
          .ScheduleChildFragment5Subcomponent {
    private ScheduleChildFragment5SubcomponentImpl(ScheduleChildFragment5 seedInstance) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(ScheduleChildFragment5 arg0) {
      injectScheduleChildFragment5(arg0);
    }

    private ScheduleChildFragment5 injectScheduleChildFragment5(ScheduleChildFragment5 instance) {
      DaggerFragment_MembersInjector.injectChildFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      BaseFragment_MembersInjector.injectViewModelFactory(
          instance, DaggerAppComponent.this.getViewModelFactory());
      return instance;
    }
  }

  private final class ScheduleChildFragment6SubcomponentBuilder
      extends FragmentBindingModule_BindScheduleChildFragment6.ScheduleChildFragment6Subcomponent
          .Builder {
    private ScheduleChildFragment6 seedInstance;

    @Override
    public void seedInstance(ScheduleChildFragment6 arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }

    @Override
    public FragmentBindingModule_BindScheduleChildFragment6.ScheduleChildFragment6Subcomponent
        build() {
      Preconditions.checkBuilderRequirement(seedInstance, ScheduleChildFragment6.class);
      return new ScheduleChildFragment6SubcomponentImpl(seedInstance);
    }
  }

  private final class ScheduleChildFragment6SubcomponentImpl
      implements FragmentBindingModule_BindScheduleChildFragment6
          .ScheduleChildFragment6Subcomponent {
    private ScheduleChildFragment6SubcomponentImpl(ScheduleChildFragment6 seedInstance) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(ScheduleChildFragment6 arg0) {
      injectScheduleChildFragment6(arg0);
    }

    private ScheduleChildFragment6 injectScheduleChildFragment6(ScheduleChildFragment6 instance) {
      DaggerFragment_MembersInjector.injectChildFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      BaseFragment_MembersInjector.injectViewModelFactory(
          instance, DaggerAppComponent.this.getViewModelFactory());
      return instance;
    }
  }

  private final class ScheduleChildFragment7SubcomponentBuilder
      extends FragmentBindingModule_BindScheduleChildFragment7.ScheduleChildFragment7Subcomponent
          .Builder {
    private ScheduleChildFragment7 seedInstance;

    @Override
    public void seedInstance(ScheduleChildFragment7 arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }

    @Override
    public FragmentBindingModule_BindScheduleChildFragment7.ScheduleChildFragment7Subcomponent
        build() {
      Preconditions.checkBuilderRequirement(seedInstance, ScheduleChildFragment7.class);
      return new ScheduleChildFragment7SubcomponentImpl(seedInstance);
    }
  }

  private final class ScheduleChildFragment7SubcomponentImpl
      implements FragmentBindingModule_BindScheduleChildFragment7
          .ScheduleChildFragment7Subcomponent {
    private ScheduleChildFragment7SubcomponentImpl(ScheduleChildFragment7 seedInstance) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(ScheduleChildFragment7 arg0) {
      injectScheduleChildFragment7(arg0);
    }

    private ScheduleChildFragment7 injectScheduleChildFragment7(ScheduleChildFragment7 instance) {
      DaggerFragment_MembersInjector.injectChildFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      BaseFragment_MembersInjector.injectViewModelFactory(
          instance, DaggerAppComponent.this.getViewModelFactory());
      return instance;
    }
  }
}
